import { isDataHtml } from "./isDataHtml";
import { dataToHtml } from "../dataToHtml";
describe("isDataHtml", () => {
    test("returns true for HTML generated by dataToHtml", () => {
        const data = {
            description: "Test description",
            url: "https://example.com",
            tags: ["tag1"],
            scopes: ["scope1"],
            image: "https://example.com/image.jpg",
        };
        expect(isDataHtml(dataToHtml(data))).toBe(true);
    });
    test("returns false for regular HTML", () => {
        const regularHtml = "<div><p>Just some HTML</p><img src='test.jpg'/></div>";
        expect(isDataHtml(regularHtml)).toBe(false);
    });
    test("returns false for plain text", () => {
        expect(isDataHtml("Just plain text")).toBe(false);
    });
    test("returns true for HTML with only description", () => {
        const data = {
            description: "Just a description",
        };
        expect(isDataHtml(dataToHtml(data))).toBe(true);
    });
    test("returns false for empty string", () => {
        expect(isDataHtml("")).toBe(false);
    });
    // TODO: check this case in-depth
    test("returns fals for HTML with pre-existing HTML in description", () => {
        const data = {
            description: "<p>Already <strong>formatted</strong> text</p>",
        };
        expect(isDataHtml(dataToHtml(data))).toBe(false);
    });
    test("returns true for HTML with only image", () => {
        const data = {
            description: "",
            image: "https://example.com/image.jpg",
        };
        expect(isDataHtml(dataToHtml(data))).toBe(true);
    });
    test("returns true for HTML with only URL", () => {
        const data = {
            description: "",
            url: "https://example.com",
        };
        expect(isDataHtml(dataToHtml(data))).toBe(true);
    });
    test("returns true for HTML with only tags and scopes", () => {
        const data = {
            description: "",
            tags: ["event", "culture"],
            scopes: ["local"],
        };
        expect(isDataHtml(dataToHtml(data))).toBe(true);
    });
    test("returns true for HTML with only tags", () => {
        const data = {
            description: "",
            tags: ["event", "culture"],
        };
        expect(isDataHtml(dataToHtml(data))).toBe(true);
    });
    test("returns true for HTML with only scopes", () => {
        const data = {
            description: "",
            scopes: ["local", "regional"],
        };
        expect(isDataHtml(dataToHtml(data))).toBe(true);
    });
    test("returns false for empty string", () => {
        expect(isDataHtml("")).toBe(false);
    });
});
